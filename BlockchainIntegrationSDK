// BlockchainIntegrationSDK.js

const { ethers } = require("ethers");

class BlockchainIntegrationSDK {
    constructor(providerUrl) {
        this.provider = new ethers.providers.JsonRpcProvider(providerUrl);
    }

    // Connect to the Ethereum network
    async connect() {
        const network = await this.provider.getNetwork();
        console.log(`Connected to network: ${network.name} (chainId: ${network.chainId})`);
    }

    // Get the balance of an address
    async getBalance(address) {
        const balance = await this.provider.getBalance(address);
        console.log(`Balance of ${address}: ${ethers.utils.formatEther(balance)} ETH`);
        return balance;
    }

    // Send a transaction
    async sendTransaction(privateKey, to, amount) {
        const wallet = new ethers.Wallet(privateKey, this.provider);
        const tx = {
            to: to,
            value: ethers.utils.parseEther(amount)
        };
        const transactionResponse = await wallet.sendTransaction(tx);
        console.log(`Transaction sent: ${transactionResponse.hash}`);
        await transactionResponse.wait();
        console.log(`Transaction mined: ${transactionResponse.hash}`);
        return transactionResponse.hash;
    }

    // Deploy a smart contract
    async deployContract(privateKey, abi, bytecode, ...args) {
        const wallet = new ethers.Wallet(privateKey, this.provider);
        const factory = new ethers.ContractFactory(abi, bytecode, wallet);
        const contract = await factory.deploy(...args);
        await contract.deployTransaction.wait();
        console.log(`Contract deployed at: ${contract.address}`);
        return contract.address;
    }

    // Interact with a smart contract
    async interactWithContract(privateKey, contractAddress, abi, methodName, ...args) {
        const wallet = new ethers.Wallet(privateKey, this.provider);
        const contract = new ethers.Contract(contractAddress, abi, wallet);
        const result = await contract[methodName](...args);
        console.log(`Contract interaction result: ${result}`);
        return result;
    }
}

module.exports = BlockchainIntegrationSDK;
